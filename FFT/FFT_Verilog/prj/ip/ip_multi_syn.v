// megafunction wizard: %LPM_MULT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_mult 

// ============================================================
// File Name: ip_multi.v
// Megafunction Name(s):
// 			lpm_mult
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.0.0 Build 614 04/24/2018 SJ Standard Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//lpm_mult DEVICE_FAMILY="Cyclone IV E" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=24 LPM_WIDTHB=16 LPM_WIDTHP=40 MAXIMIZE_SPEED=5 aclr clken clock dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_mult 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_padd 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//adder DEVICE_FAMILY="Cyclone IV E" WIDTH=23 dataa datab result
//VERSION_BEGIN 18.0 cbx_mgl 2018:04:24:18:08:49:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone IV E" WIDTH=7 dataa datab result
//VERSION_BEGIN 18.0 cbx_mgl 2018:04:24:18:08:49:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END

//synthesis_resources = dsp_9bit 4 lut 30 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ip_multi_mult
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [23:0]  dataa;
	input   [15:0]  datab;
	output   [39:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[22:0]	wire_add5_result;
	wire	[6:0]	wire_add9_result;
	wire  [33:0]   wire_mac_mult1_dataout;
	wire  [21:0]   wire_mac_mult3_dataout;
	wire  [33:0]   wire_mac_out2_dataout;
	wire  [21:0]   wire_mac_out4_dataout;
	wire  [6:0]   wire_sft10a_in;
	wire  [6:0]   wire_sft10a_out;
	wire  [6:0]   wire_sft11a_in;
	wire  [6:0]   wire_sft11a_out;
	wire  [6:0]   wire_sft12a_in;
	wire  [6:0]   wire_sft12a_out;
	wire  [22:0]   wire_sft6a_in;
	wire  [22:0]   wire_sft6a_out;
	wire  [22:0]   wire_sft7a_in;
	wire  [22:0]   wire_sft7a_out;
	wire  [22:0]   wire_sft8a_in;
	wire  [22:0]   wire_sft8a_out;
	wire  w114w;
	wire  w123w;
	wire  [40:0]  w230w;

	assign
		wire_add5_result = wire_sft6a_out + wire_sft7a_out;
	assign
		wire_add9_result = wire_sft10a_out + wire_sft11a_out;
	cycloneive_mac_mult   mac_mult1
	( 
	.dataa({dataa[17:0]}),
	.datab({datab[15:0]}),
	.dataout(wire_mac_mult1_dataout),
	.signa(1'b0),
	.signb(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult1.dataa_clock = "none",
		mac_mult1.dataa_width = 18,
		mac_mult1.datab_clock = "none",
		mac_mult1.datab_width = 16,
		mac_mult1.signa_clock = "none",
		mac_mult1.signb_clock = "none",
		mac_mult1.lpm_type = "cycloneive_mac_mult";
	cycloneive_mac_mult   mac_mult3
	( 
	.dataa({dataa[23:18]}),
	.datab({datab[15:0]}),
	.dataout(wire_mac_mult3_dataout),
	.signa(1'b1),
	.signb(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult3.dataa_clock = "none",
		mac_mult3.dataa_width = 6,
		mac_mult3.datab_clock = "none",
		mac_mult3.datab_width = 16,
		mac_mult3.signa_clock = "none",
		mac_mult3.signb_clock = "none",
		mac_mult3.lpm_type = "cycloneive_mac_mult";
	cycloneive_mac_out   mac_out2
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult1_dataout),
	.dataout(wire_mac_out2_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out2.dataa_width = 34,
		mac_out2.output_clock = "0",
		mac_out2.lpm_type = "cycloneive_mac_out";
	cycloneive_mac_out   mac_out4
	( 
	.aclr(aclr),
	.clk(clock),
	.dataa(wire_mac_mult3_dataout),
	.dataout(wire_mac_out4_dataout),
	.ena(clken)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out4.dataa_width = 22,
		mac_out4.output_clock = "0",
		mac_out4.lpm_type = "cycloneive_mac_out";
	soft   sft10a_0
	( 
	.in(wire_sft10a_in[0:0]),
	.out(wire_sft10a_out[0:0]));
	soft   sft10a_1
	( 
	.in(wire_sft10a_in[1:1]),
	.out(wire_sft10a_out[1:1]));
	soft   sft10a_2
	( 
	.in(wire_sft10a_in[2:2]),
	.out(wire_sft10a_out[2:2]));
	soft   sft10a_3
	( 
	.in(wire_sft10a_in[3:3]),
	.out(wire_sft10a_out[3:3]));
	soft   sft10a_4
	( 
	.in(wire_sft10a_in[4:4]),
	.out(wire_sft10a_out[4:4]));
	soft   sft10a_5
	( 
	.in(wire_sft10a_in[5:5]),
	.out(wire_sft10a_out[5:5]));
	soft   sft10a_6
	( 
	.in(wire_sft10a_in[6:6]),
	.out(wire_sft10a_out[6:6]));
	assign
		wire_sft10a_in = {w123w, {wire_mac_out4_dataout[20], {wire_mac_out4_dataout[19], {wire_mac_out4_dataout[18], {wire_mac_out4_dataout[17], {wire_mac_out4_dataout[16], w114w}}}}}};
	soft   sft11a_0
	( 
	.in(wire_sft11a_in[0:0]),
	.out(wire_sft11a_out[0:0]));
	soft   sft11a_1
	( 
	.in(wire_sft11a_in[1:1]),
	.out(wire_sft11a_out[1:1]));
	soft   sft11a_2
	( 
	.in(wire_sft11a_in[2:2]),
	.out(wire_sft11a_out[2:2]));
	soft   sft11a_3
	( 
	.in(wire_sft11a_in[3:3]),
	.out(wire_sft11a_out[3:3]));
	soft   sft11a_4
	( 
	.in(wire_sft11a_in[4:4]),
	.out(wire_sft11a_out[4:4]));
	soft   sft11a_5
	( 
	.in(wire_sft11a_in[5:5]),
	.out(wire_sft11a_out[5:5]));
	soft   sft11a_6
	( 
	.in(wire_sft11a_in[6:6]),
	.out(wire_sft11a_out[6:6]));
	assign
		wire_sft11a_in = {w123w, {w123w, {w123w, {w123w, {w123w, {w123w, wire_mac_out4_dataout[15]}}}}}};
	soft   sft12a_0
	( 
	.in(wire_sft12a_in[0:0]),
	.out(wire_sft12a_out[0:0]));
	soft   sft12a_1
	( 
	.in(wire_sft12a_in[1:1]),
	.out(wire_sft12a_out[1:1]));
	soft   sft12a_2
	( 
	.in(wire_sft12a_in[2:2]),
	.out(wire_sft12a_out[2:2]));
	soft   sft12a_3
	( 
	.in(wire_sft12a_in[3:3]),
	.out(wire_sft12a_out[3:3]));
	soft   sft12a_4
	( 
	.in(wire_sft12a_in[4:4]),
	.out(wire_sft12a_out[4:4]));
	soft   sft12a_5
	( 
	.in(wire_sft12a_in[5:5]),
	.out(wire_sft12a_out[5:5]));
	soft   sft12a_6
	( 
	.in(wire_sft12a_in[6:6]),
	.out(wire_sft12a_out[6:6]));
	assign
		wire_sft12a_in = wire_add9_result;
	soft   sft6a_0
	( 
	.in(wire_sft6a_in[0:0]),
	.out(wire_sft6a_out[0:0]));
	soft   sft6a_1
	( 
	.in(wire_sft6a_in[1:1]),
	.out(wire_sft6a_out[1:1]));
	soft   sft6a_2
	( 
	.in(wire_sft6a_in[2:2]),
	.out(wire_sft6a_out[2:2]));
	soft   sft6a_3
	( 
	.in(wire_sft6a_in[3:3]),
	.out(wire_sft6a_out[3:3]));
	soft   sft6a_4
	( 
	.in(wire_sft6a_in[4:4]),
	.out(wire_sft6a_out[4:4]));
	soft   sft6a_5
	( 
	.in(wire_sft6a_in[5:5]),
	.out(wire_sft6a_out[5:5]));
	soft   sft6a_6
	( 
	.in(wire_sft6a_in[6:6]),
	.out(wire_sft6a_out[6:6]));
	soft   sft6a_7
	( 
	.in(wire_sft6a_in[7:7]),
	.out(wire_sft6a_out[7:7]));
	soft   sft6a_8
	( 
	.in(wire_sft6a_in[8:8]),
	.out(wire_sft6a_out[8:8]));
	soft   sft6a_9
	( 
	.in(wire_sft6a_in[9:9]),
	.out(wire_sft6a_out[9:9]));
	soft   sft6a_10
	( 
	.in(wire_sft6a_in[10:10]),
	.out(wire_sft6a_out[10:10]));
	soft   sft6a_11
	( 
	.in(wire_sft6a_in[11:11]),
	.out(wire_sft6a_out[11:11]));
	soft   sft6a_12
	( 
	.in(wire_sft6a_in[12:12]),
	.out(wire_sft6a_out[12:12]));
	soft   sft6a_13
	( 
	.in(wire_sft6a_in[13:13]),
	.out(wire_sft6a_out[13:13]));
	soft   sft6a_14
	( 
	.in(wire_sft6a_in[14:14]),
	.out(wire_sft6a_out[14:14]));
	soft   sft6a_15
	( 
	.in(wire_sft6a_in[15:15]),
	.out(wire_sft6a_out[15:15]));
	soft   sft6a_16
	( 
	.in(wire_sft6a_in[16:16]),
	.out(wire_sft6a_out[16:16]));
	soft   sft6a_17
	( 
	.in(wire_sft6a_in[17:17]),
	.out(wire_sft6a_out[17:17]));
	soft   sft6a_18
	( 
	.in(wire_sft6a_in[18:18]),
	.out(wire_sft6a_out[18:18]));
	soft   sft6a_19
	( 
	.in(wire_sft6a_in[19:19]),
	.out(wire_sft6a_out[19:19]));
	soft   sft6a_20
	( 
	.in(wire_sft6a_in[20:20]),
	.out(wire_sft6a_out[20:20]));
	soft   sft6a_21
	( 
	.in(wire_sft6a_in[21:21]),
	.out(wire_sft6a_out[21:21]));
	soft   sft6a_22
	( 
	.in(wire_sft6a_in[22:22]),
	.out(wire_sft6a_out[22:22]));
	assign
		wire_sft6a_in = {w114w, {(~ wire_mac_out4_dataout[21]), {w114w, {w114w, {w114w, {w114w, {w114w, {(~ wire_mac_out2_dataout[33]), {wire_mac_out2_dataout[32], {wire_mac_out2_dataout[31], {wire_mac_out2_dataout[30], {wire_mac_out2_dataout[29], {wire_mac_out2_dataout[28], {wire_mac_out2_dataout[27], {wire_mac_out2_dataout[26], {wire_mac_out2_dataout[25], {wire_mac_out2_dataout[24], {wire_mac_out2_dataout[23], {wire_mac_out2_dataout[22], {wire_mac_out2_dataout[21], {wire_mac_out2_dataout[20], {wire_mac_out2_dataout[19:18]}}}}}}}}}}}}}}}}}}}}}};
	soft   sft7a_0
	( 
	.in(wire_sft7a_in[0:0]),
	.out(wire_sft7a_out[0:0]));
	soft   sft7a_1
	( 
	.in(wire_sft7a_in[1:1]),
	.out(wire_sft7a_out[1:1]));
	soft   sft7a_2
	( 
	.in(wire_sft7a_in[2:2]),
	.out(wire_sft7a_out[2:2]));
	soft   sft7a_3
	( 
	.in(wire_sft7a_in[3:3]),
	.out(wire_sft7a_out[3:3]));
	soft   sft7a_4
	( 
	.in(wire_sft7a_in[4:4]),
	.out(wire_sft7a_out[4:4]));
	soft   sft7a_5
	( 
	.in(wire_sft7a_in[5:5]),
	.out(wire_sft7a_out[5:5]));
	soft   sft7a_6
	( 
	.in(wire_sft7a_in[6:6]),
	.out(wire_sft7a_out[6:6]));
	soft   sft7a_7
	( 
	.in(wire_sft7a_in[7:7]),
	.out(wire_sft7a_out[7:7]));
	soft   sft7a_8
	( 
	.in(wire_sft7a_in[8:8]),
	.out(wire_sft7a_out[8:8]));
	soft   sft7a_9
	( 
	.in(wire_sft7a_in[9:9]),
	.out(wire_sft7a_out[9:9]));
	soft   sft7a_10
	( 
	.in(wire_sft7a_in[10:10]),
	.out(wire_sft7a_out[10:10]));
	soft   sft7a_11
	( 
	.in(wire_sft7a_in[11:11]),
	.out(wire_sft7a_out[11:11]));
	soft   sft7a_12
	( 
	.in(wire_sft7a_in[12:12]),
	.out(wire_sft7a_out[12:12]));
	soft   sft7a_13
	( 
	.in(wire_sft7a_in[13:13]),
	.out(wire_sft7a_out[13:13]));
	soft   sft7a_14
	( 
	.in(wire_sft7a_in[14:14]),
	.out(wire_sft7a_out[14:14]));
	soft   sft7a_15
	( 
	.in(wire_sft7a_in[15:15]),
	.out(wire_sft7a_out[15:15]));
	soft   sft7a_16
	( 
	.in(wire_sft7a_in[16:16]),
	.out(wire_sft7a_out[16:16]));
	soft   sft7a_17
	( 
	.in(wire_sft7a_in[17:17]),
	.out(wire_sft7a_out[17:17]));
	soft   sft7a_18
	( 
	.in(wire_sft7a_in[18:18]),
	.out(wire_sft7a_out[18:18]));
	soft   sft7a_19
	( 
	.in(wire_sft7a_in[19:19]),
	.out(wire_sft7a_out[19:19]));
	soft   sft7a_20
	( 
	.in(wire_sft7a_in[20:20]),
	.out(wire_sft7a_out[20:20]));
	soft   sft7a_21
	( 
	.in(wire_sft7a_in[21:21]),
	.out(wire_sft7a_out[21:21]));
	soft   sft7a_22
	( 
	.in(wire_sft7a_in[22:22]),
	.out(wire_sft7a_out[22:22]));
	assign
		wire_sft7a_in = {w123w, {wire_sft12a_out[6], {wire_sft12a_out[5], {wire_sft12a_out[4], {wire_sft12a_out[3], {wire_sft12a_out[2], {wire_sft12a_out[1], {wire_sft12a_out[0], {wire_mac_out4_dataout[14], {wire_mac_out4_dataout[13], {wire_mac_out4_dataout[12], {wire_mac_out4_dataout[11], {wire_mac_out4_dataout[10], {wire_mac_out4_dataout[9], {wire_mac_out4_dataout[8], {wire_mac_out4_dataout[7], {wire_mac_out4_dataout[6], {wire_mac_out4_dataout[5], {wire_mac_out4_dataout[4], {wire_mac_out4_dataout[3], {wire_mac_out4_dataout[2], {wire_mac_out4_dataout[1:0]}}}}}}}}}}}}}}}}}}}}}};
	soft   sft8a_0
	( 
	.in(wire_sft8a_in[0:0]),
	.out(wire_sft8a_out[0:0]));
	soft   sft8a_1
	( 
	.in(wire_sft8a_in[1:1]),
	.out(wire_sft8a_out[1:1]));
	soft   sft8a_2
	( 
	.in(wire_sft8a_in[2:2]),
	.out(wire_sft8a_out[2:2]));
	soft   sft8a_3
	( 
	.in(wire_sft8a_in[3:3]),
	.out(wire_sft8a_out[3:3]));
	soft   sft8a_4
	( 
	.in(wire_sft8a_in[4:4]),
	.out(wire_sft8a_out[4:4]));
	soft   sft8a_5
	( 
	.in(wire_sft8a_in[5:5]),
	.out(wire_sft8a_out[5:5]));
	soft   sft8a_6
	( 
	.in(wire_sft8a_in[6:6]),
	.out(wire_sft8a_out[6:6]));
	soft   sft8a_7
	( 
	.in(wire_sft8a_in[7:7]),
	.out(wire_sft8a_out[7:7]));
	soft   sft8a_8
	( 
	.in(wire_sft8a_in[8:8]),
	.out(wire_sft8a_out[8:8]));
	soft   sft8a_9
	( 
	.in(wire_sft8a_in[9:9]),
	.out(wire_sft8a_out[9:9]));
	soft   sft8a_10
	( 
	.in(wire_sft8a_in[10:10]),
	.out(wire_sft8a_out[10:10]));
	soft   sft8a_11
	( 
	.in(wire_sft8a_in[11:11]),
	.out(wire_sft8a_out[11:11]));
	soft   sft8a_12
	( 
	.in(wire_sft8a_in[12:12]),
	.out(wire_sft8a_out[12:12]));
	soft   sft8a_13
	( 
	.in(wire_sft8a_in[13:13]),
	.out(wire_sft8a_out[13:13]));
	soft   sft8a_14
	( 
	.in(wire_sft8a_in[14:14]),
	.out(wire_sft8a_out[14:14]));
	soft   sft8a_15
	( 
	.in(wire_sft8a_in[15:15]),
	.out(wire_sft8a_out[15:15]));
	soft   sft8a_16
	( 
	.in(wire_sft8a_in[16:16]),
	.out(wire_sft8a_out[16:16]));
	soft   sft8a_17
	( 
	.in(wire_sft8a_in[17:17]),
	.out(wire_sft8a_out[17:17]));
	soft   sft8a_18
	( 
	.in(wire_sft8a_in[18:18]),
	.out(wire_sft8a_out[18:18]));
	soft   sft8a_19
	( 
	.in(wire_sft8a_in[19:19]),
	.out(wire_sft8a_out[19:19]));
	soft   sft8a_20
	( 
	.in(wire_sft8a_in[20:20]),
	.out(wire_sft8a_out[20:20]));
	soft   sft8a_21
	( 
	.in(wire_sft8a_in[21:21]),
	.out(wire_sft8a_out[21:21]));
	soft   sft8a_22
	( 
	.in(wire_sft8a_in[22:22]),
	.out(wire_sft8a_out[22:22]));
	assign
		wire_sft8a_in = wire_add5_result;
	assign
		result = w230w[39:0],
		w114w = 1'b1,
		w123w = 1'b0,
		w230w = {wire_sft8a_out[22:21], wire_sft8a_out[20:19], wire_sft8a_out[18:17], wire_sft8a_out[16:15], wire_sft8a_out[14:13], wire_sft8a_out[12:11], wire_sft8a_out[10:9], wire_sft8a_out[8:7], wire_sft8a_out[6:5], wire_sft8a_out[4:3], wire_sft8a_out[2:1], wire_sft8a_out[0], wire_mac_out2_dataout[17], wire_mac_out2_dataout[16], wire_mac_out2_dataout[15], wire_mac_out2_dataout[14], wire_mac_out2_dataout[13], wire_mac_out2_dataout[12], wire_mac_out2_dataout[11], wire_mac_out2_dataout[10], wire_mac_out2_dataout[9], wire_mac_out2_dataout[8], wire_mac_out2_dataout[7], wire_mac_out2_dataout[6], wire_mac_out2_dataout[5], wire_mac_out2_dataout[4], wire_mac_out2_dataout[3], wire_mac_out2_dataout[2], wire_mac_out2_dataout[1], wire_mac_out2_dataout[0]};
endmodule //ip_multi_mult
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module ip_multi (
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	  clken;
	input	  clock;
	input	[23:0]  dataa;
	input	[15:0]  datab;
	output	[39:0]  result;

	wire [39:0] sub_wire0;
	wire [39:0] result = sub_wire0[39:0];

	ip_multi_mult	ip_multi_mult_component (
				.aclr (aclr),
				.clken (clken),
				.clock (clock),
				.dataa (dataa),
				.datab (datab),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AutoSizeResult NUMERIC "1"
// Retrieval info: PRIVATE: B_isConstant NUMERIC "0"
// Retrieval info: PRIVATE: ConstantB NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: PRIVATE: LPM_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: Latency NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: SignedMult NUMERIC "1"
// Retrieval info: PRIVATE: USE_MULT NUMERIC "1"
// Retrieval info: PRIVATE: ValidConstant NUMERIC "0"
// Retrieval info: PRIVATE: WidthA NUMERIC "24"
// Retrieval info: PRIVATE: WidthB NUMERIC "16"
// Retrieval info: PRIVATE: WidthP NUMERIC "40"
// Retrieval info: PRIVATE: aclr NUMERIC "1"
// Retrieval info: PRIVATE: clken NUMERIC "1"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: PRIVATE: optimize NUMERIC "0"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_HINT STRING "MAXIMIZE_SPEED=5"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "1"
// Retrieval info: CONSTANT: LPM_REPRESENTATION STRING "SIGNED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MULT"
// Retrieval info: CONSTANT: LPM_WIDTHA NUMERIC "24"
// Retrieval info: CONSTANT: LPM_WIDTHB NUMERIC "16"
// Retrieval info: CONSTANT: LPM_WIDTHP NUMERIC "40"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: USED_PORT: clken 0 0 0 0 INPUT NODEFVAL "clken"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 24 0 INPUT NODEFVAL "dataa[23..0]"
// Retrieval info: USED_PORT: datab 0 0 16 0 INPUT NODEFVAL "datab[15..0]"
// Retrieval info: USED_PORT: result 0 0 40 0 OUTPUT NODEFVAL "result[39..0]"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @clken 0 0 0 0 clken 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 24 0 dataa 0 0 24 0
// Retrieval info: CONNECT: @datab 0 0 16 0 datab 0 0 16 0
// Retrieval info: CONNECT: result 0 0 40 0 @result 0 0 40 0
// Retrieval info: GEN_FILE: TYPE_NORMAL ip_multi.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL ip_multi.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL ip_multi.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL ip_multi.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL ip_multi_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL ip_multi_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL ip_multi_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
